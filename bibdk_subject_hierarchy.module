<?php
/**
 * @file
 * Bibliotek.dk subject hierarchy module main file.
 */

define('BIBDK_XML_PATH', 'public://bibdk_subject_hierarchy');
define('BIBDK_ONE_WEEK', 604800);

// includes search functionality
include_once('bibdk_subject_hierarchy.search.inc');

// includes suggestion functionality
include_once('bibdk_subject_hierarchy.suggestion.inc');

/**
 * Implements hook_ctools_plugin_directory().
 */
function bibdk_subject_hierarchy_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu().
 */
function bibdk_subject_hierarchy_menu() {

  // Returns AJAX commands if the user has JavaScript turned on.
  $items['bibdk_subject_hierarchy/ajax/%'] = [
    'title' => 'bibdk_subject_hierarchy callback',
    'page callback' => 'bibdk_subject_hierarchy_ajax_callback',
    'page arguments' => [2],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  // Returns a Non-JavaScript alternative.
  $items['bibdk_subject_hierarchy/nojs/%'] = [
    'title' => 'bibdk_subject_hierarchy non-javascript callback',
    'page callback' => 'bibdk_subject_hierarchy_nojs_callback',
    'page arguments' => [2],
    'access arguments' => ['access content'],
  ];

  // Admin menu
  $items['admin/config/search/bibdk_subject_hierarchy'] = [
    'title' => 'Subject hierarchy',
    'description' => 'Set admin email for user suggestions',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['bibdk_subject_hierarchy_admin'],
    'access arguments' => ['administer search'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'bibdk_subject_hierarchy.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_help().
 */
function bibdk_subject_hierarchy_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#bibdk_subject_hierarchy';
      $file = drupal_get_path('module', 'bibdk_subject_hierarchy') . "/help/bibdk_subject_hierarchy.help";
      $output = file_get_contents($file);
      break;
  }

  return $output;
}

/**
 * Implements hook_block_info().
 */
function bibdk_subject_hierarchy_block_info() {
  $blocks['bibdk-subject-hierarchy'] = [
    'title' => '<none>',
    'info' => t('Bibliotek.dk subject hierarchy'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bibdk_subject_hierarchy_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'bibdk-subject-hierarchy':
      // Load in Drupal core AJAX library.
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_js(drupal_get_path('module', 'bibdk_subject_hierarchy') . '/js/bibdk_subject_hierarchy.js');
      drupal_add_js(drupal_get_path('module', 'ting_search') . '/js/ting_search_overlay.js');
      $block['title'] = '<none>';
      $block['subject'] = t('Bibliotek.dk subject hierarchy', []);
      $block['content'] = bibdk_subject_hierarchy_get_block_content();
      $block['visibilty'] = BLOCK_VISIBILITY_LISTED;
      $block['pages'] = '<front>';
      break;
  }

  return $block;
}

/**
 * Implements hook_cron().
 */
function bibdk_subject_hierarchy_cron() {
  if (REQUEST_TIME <= variable_get('bibdk_subject_hierarchy_next_execution', 0)) {
    return;
  }

  $urls = [
    'https://raw.githubusercontent.com/DBCDK/bibdk_subject_hierarchy/master/data/emnehierarki_full.xml',
    'https://raw.githubusercontent.com/DBCDK/bibdk_subject_hierarchy/master/data/emnehierarki_test.xml',
  ];

  $dir = BIBDK_XML_PATH;
  if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    foreach ($urls as $url) {
      $new = system_retrieve_file($url, BIBDK_XML_PATH, FALSE, FILE_EXISTS_REPLACE);
      if ($new) {
        watchdog('subject_hierarchy', 'Xml files was reloaded.', [], WATCHDOG_INFO);
        _update_bibdk_subject_hierarchy();
      }
    }
    $interval = variable_get('bibdk_subject_hierarchy_interval', BIBDK_ONE_WEEK);
    variable_set('bibdk_subject_hierarchy_next_execution', REQUEST_TIME + $interval);
  }
  else {
    watchdog('subject_hierarchy', 'Failed create bibdk storage at: @path', ['@path' => BIBDK_XML_PATH], WATCHDOG_ERROR);
  }

}

/**
 * Implements hook_theme().
 */
function bibdk_subject_hierarchy_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'bibdk_subject_hierarchy') . '/theme';

  return [
    'bibdk_subject_hierarchy' => [
      'variables' => [
        'hierarchy' => [],
        'rows' => [],
        'header' => '',
        'searchfield' => '',
        'searchfield_link' => '',
        'helptext' => '',
      ],
      'path' => $path,
      'template' => 'bibdk-subject-hierarchy',
    ],
    'bibdk_subject_hierarchy_item' => [
      'variables' => [
        'heading' => NULL,
        'hierarchy' => NULL,
        'breadcrumbs' => NULL,
        'current_key' => NULL,
        'search_path' => NULL,
        'close_button' => NULL,
      ],
      'path' => $path,
      'template' => 'bibdk-subject-hierarchy-item',
    ],
    'bibdk_subject_hierarchy_row' => [
      'variables' => [
        'row' => 0,
        'items' => [],
        'visible_row' => '',
        'display' => 'none',
      ],
      'path' => $path,
      'template' => 'bibdk-subject-hierarchy-row',
    ],
  ];
}

/**
 * @param array $row_to_show
 *
 * @return array
 *   Renderable array of hierarchy rows.
 */
function bibdk_subject_hierarchy_get_block_content($row_to_show = []) {
  drupal_add_css(drupal_get_path('module', 'bibdk_subject_hierarchy') . '/css/bibdk_subject_hierarchy.css', ['type' => 'file']);
  drupal_add_js(drupal_get_path('module', 'bibdk_subject_hierarchy') . '/js/bibdk_subject_hierarchy.js');
  drupal_add_js(drupal_get_path('module', 'ting_search') . '/js/ting_search_overlay.js');

  $hierarchy = _get_bibdk_subject_hierarchy();
  $rows = _bibdk_subject_hierarchy_get_rows($hierarchy, $row_to_show);

  $searchfield_link = [
    '#theme' => 'link',
    '#text' => t('search subject hierarchy', [], ['context' => 'bibdk_subject_hierarchy']),
    '#path' => FALSE,
    '#options' => [
      'attributes' => [
        'alt' => t('search subject hierarchy', [], ['context' => 'bibdk_subject_hierarchy']),
        'class' => [],
        'data-dropdown' => 'searchfield-dropdown',
        'aria-controls' => 'searchfield-dropdown',
        'aria-expanded' => 'false',
        'data-options' => 'align:left',
      ],
      'html' => TRUE,
    ],
  ];

  return [
    '#theme' => 'bibdk_subject_hierarchy',
    '#rows' => $rows,
    '#header' => t('HEADER_BIBDK_SUBJECT_HIERARCHY', [], ['context' => 'bibdk_subject_hierarchy']),
    '#searchfield' => drupal_get_form('bibdk_subject_hierarchy_searchfield_form'),
    '#searchfield_link' => $searchfield_link,
    '#helptext' => t('SUBJECT_HIERARCHY_HELPTEXT', [], ['context' => 'bibdk_subject_hierarchy']),
  ];
}

/**
 * callback method for bibdk_custom_header_block
 *
 * @return array|mixed
 * @see bibdk_custom_header_block/plugins/content_types/custom_header_block.inc
 */
function bibdk_subject_hierarchy_get_searchfield() {
  return drupal_get_form('bibdk_subject_hierarchy_searchfield_form');
}

/**
 * @param array $hierarchy
 * @param array $row_to_show
 *
 * @return array
 */
function _bibdk_subject_hierarchy_get_rows($hierarchy, $row_to_show) {
  $rendered = [];

  $rows = _bibdk_subject_hierarchy_get_arranged_items($hierarchy, $row_to_show);

  $prepared = _bibdk_subject_hierarchy_prepare_rows_for_rendering($rows, $row_to_show);

  foreach ($prepared as $row) {
    $rendered[] = drupal_render($row);
  }

  return $rendered;
}

function _bibdk_subject_hierarchy_prepare_rows_for_rendering($rows, $row_to_show) {
  $prepared = [];

  foreach ($rows as $key => $row) {
    $visible_row = '';
    $display = 'none';

    if (!empty($row_to_show['row']) && $row_to_show['row'] == $key) {
      $visible_row = $row_to_show['rendered'];
      $display = 'block';
    }

    $to_render = [
      '#theme' => 'bibdk_subject_hierarchy_row',
      '#row' => $key,
      '#items' => $row,
      '#visible_row' => $visible_row,
      '#display' => $display,
    ];

    $prepared[] = $to_render;
  }

  return $prepared;
}

/**
 * @param $hierarchy
 * @param $row_to_show
 *
 * @return array
 */
function _bibdk_subject_hierarchy_get_arranged_items($hierarchy, $row_to_show) {
  $rows = [];

  foreach ($hierarchy as $index => $item) {
    $row = (int) ceil(($index + 1) / 4);

    $item['label_id'] = 'subject-hierarchy-label-link-0-' . $index;
    $item['note_id'] = 'subject-hierarchy-note-link-0-' . $index;
    $item['url'] = url('bibdk_subject_hierarchy/nojs/' . $index);
    $item['note'] = t($item['note'], [], ['context' => 'bibdk_subject_hierarchy']);

    $item['wrapper_classes'] = 'subject-item item-' . $index;
    if (!empty($row_to_show['level']) && $row_to_show['level'] == $index) {
      $item['wrapper_classes'] .= ' subject-item--active';
    }

    $rows[$row][$index] = $item;
  }

  return $rows;
}

/**
 * AJAX callback.
 *
 * @param string $key
 *   Hierarchy level ids.
 */
function bibdk_subject_hierarchy_ajax_callback($key) {
  // Based on 7.39 core version, mark the current URL as trusted.
  ajax_set_verification_header();

  $emnehierarki = _get_bibdk_subject_hierarchy();

  $emnehierarki_item = _get_bibdk_subject_hierarchy_item($emnehierarki, $key);
  $row = $emnehierarki_item['row'];
  $level = $emnehierarki_item['level'];

  // Create a new AJAX command that replaces the .subjects-wrapper text.
  $ajax_commands[] = ajax_command_replace('.subjects-sublist-wrapper.row-' . $row, '<div class="subjects-sublist-wrapper row-' . $row . '">' . drupal_render($emnehierarki_item) . '</div>');
  $ajax_commands[] = ajax_command_invoke('.subjects-sublist-wrapper', 'fadeOut', ['200']);
  $ajax_commands[] = ajax_command_invoke('.subjects-sublist-wrapper.row-' . $row, 'fadeIn', ['200']);
  $ajax_commands[] = ajax_command_invoke('.subject-item', 'removeClass', ['subject-item--active']);
  $ajax_commands[] = ajax_command_invoke('.subject-item.item-' . $level, 'addClass', ['subject-item--active']);
  $ajax_commands[] = ajax_command_invoke('#bibdk-subject-hierarchy-searchresult .close', 'click');

  return drupal_json_output($ajax_commands);
}

/**
 * Non-JavaScript callback.
 *
 * @param string $key
 *   Hierarchy level id.
 *
 * @return array|mixed
 */
function bibdk_subject_hierarchy_nojs_callback($key) {
  $emnehierarki = _get_bibdk_subject_hierarchy();

  $items = _get_bibdk_subject_hierarchy_item($emnehierarki, $key);
  $row_to_show['rendered'] = drupal_render($items);
  $row_to_show['row'] = $items['row'];
  $row_to_show['level'] = $items['level'];

  return bibdk_subject_hierarchy_get_block_content($row_to_show);
}

/**
 * Generate hierarchy item.
 *
 * @param array $emnehierarki
 * @param string $current_key
 *
 * @return array
 */
function _get_bibdk_subject_hierarchy_item($emnehierarki, $current_key) {
  $breadcrumbs = [];
  $heading = '';
  $key_arr = explode(',', $current_key);

  $search_path = _bibdk_subject_hierarchy_search_info();

  $path = _bibdk_subject_hierarchy_search_info();

  if (sizeof($key_arr) > 0) {
    $breadcrumbs = _get_bibdk_subject_hierarchy_breadcrumbs($emnehierarki, $key_arr, $path);
    $heading = _get_bibdk_subject_hierarchy_heading($emnehierarki, $key_arr, $path);
  }

  $level = array_shift($key_arr);

  $row = (int) ceil(($level + 1) / 4);

  $emnehierarki = $emnehierarki[$level];

  if (sizeof($key_arr) > 0) {
    $emnehierarki = _get_bibdk_subject_hierarchy_level($emnehierarki, $key_arr);
  }

  $emnehierarki_links = [];
  foreach ($emnehierarki['term'] as $key2 => $item) {
    $link = [
      '#theme' => 'link',
      '#text' => $item['ord'],
      '#path' => NULL,
      '#options' => ['attributes' => [], 'html' => TRUE],
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    ];
    if (!empty($item['cql']) && empty($item['term'])) {
      $link['#path'] = 'search/' . $search_path . '/' . trim($item['cql']);
    }
    else {
      $link['#path'] = 'bibdk_subject_hierarchy/nojs/' . $current_key . ',' . $key2;
      $link['#options']['attributes']['class'] = [
        'use-ajax',
        'nesting',
        'icon-plus-alt',
      ];
    }
    $emnehierarki_links[] = $link;
  }

  drupal_set_title($breadcrumbs[count($breadcrumbs) - 1]['final-breadcrumb']['#markup']);

  $close_button = [
    '#theme' => 'link',
    '#text' => t('Close'),
    '#path' => FALSE,
    '#options' => [
      'attributes' => [
        'alt' => t('close subject hierarchy submenu.', [], ['context' => 'bibdk_subject_hierarchy']),
        'class' => [],
      ],
      'html' => TRUE,
    ],
  ];

  return [
    '#theme' => 'bibdk_subject_hierarchy_item',
    '#breadcrumbs' => $breadcrumbs,
    '#heading' => $heading,
    '#hierarchy' => $emnehierarki_links,
    '#current_key' => $current_key,
    '#search_path' => $search_path,
    '#close_button' => $close_button,
    'row' => $row,
    'level' => $level,
  ];
}

/**
 * @return array|bool|null
 */
function _get_bibdk_subject_hierarchy() {
  $emnehierarki = variable_get('subject_hierarchy', NULL);
  if (!$emnehierarki) {
    $emnehierarki = _bibdk_subject_hierarchy_read_data();
    variable_set('subject_hierarchy', $emnehierarki);
  }

  return $emnehierarki;
}

function _update_bibdk_subject_hierarchy() {
  $emnehierarki = _bibdk_subject_hierarchy_read_data();
  variable_set('subject_hierarchy', $emnehierarki);
}

function _bibdk_subject_hierarchy_search_info() {
  $path = '';
  $search_info = search_get_default_module_info();
  if (!empty($search_info['path']) && in_array($search_info['module'], variable_get('search_active_modules', []))) {
    $path = $search_info['path'];
  }

  return $path;
}

function _get_bibdk_subject_hierarchy_level($emnehierarki, $key) {
  $level = array_shift($key);
  if (isset($emnehierarki['term']) && isset($emnehierarki['term'][$level])) {
    $emnehierarki = $emnehierarki['term'][$level];
  }
  else {
    return NULL;
  }
  if (sizeof($key) > 0) {
    $emnehierarki = _get_bibdk_subject_hierarchy_level($emnehierarki, $key);
  }

  return $emnehierarki;
}

/**
 * Generate a clickable breadcrumb displayed in the top of the box when a
 * subject is clicked.
 *
 * @param $emnehierarki
 * @param $keys
 * @param string $path
 *
 * @return array
 * @internal param array $breadcrumbs
 */
function _get_bibdk_subject_hierarchy_breadcrumbs($emnehierarki, $keys, $path = 'ting') {
  $breadcrumbs = [];
  $parent_string = '';

  foreach ($keys as $key) {
    $current_level = (empty($current_level)) ? $emnehierarki[$key] : $current_level['term'][$key];
    $parent_string .= (empty($parent_string) && $parent_string !== '0') ? $key : ',' . $key;

    $breadcrumb = [
      '#theme' => 'link',
      '#text' => $current_level['ord'],
      '#path' => 'bibdk_subject_hierarchy/nojs/' . $parent_string,
      '#options' => [
        'attributes' => (empty($current_level['cql'])) ? ['class' => ['container-last']] : [
          'class' => [
            'use-ajax',
            'icon-keyboard_arrow_right',
          ],
        ],
        'html' => FALSE,
      ],
    ];

    $breadcrumbs[] = $breadcrumb;
  }

  // replace content of last breadcrumb
  $breadcrumbs[sizeof($breadcrumbs) - 1] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['container-last'],
    ],
    'final-breadcrumb' => [
      '#type' => 'markup',
      '#markup' => $breadcrumb['#text'],
    ],
  ];

  if (sizeof($breadcrumbs) != 1) {
    $breadcrumbs[sizeof($breadcrumbs) - 1]['#attributes']['class'][] = 'icon-keyboard_arrow_right';
  }

  return $breadcrumbs;
}

/**
 * Generate a heading, with a link if cql is not empty
 *
 * @param $emnehierarki
 * @param $keys
 * @param string $path
 *
 * @return array
 * @internal param array $heading
 */
function _get_bibdk_subject_hierarchy_heading($emnehierarki, $keys, $path = 'ting') {
  $current_level = [];
  foreach ($keys as $key) {
    $current_level = empty($current_level) ? $emnehierarki[$key] : $current_level['term'][$key];
  }

  if (!empty($current_level['cql'])) {
    $heading = [
      '#theme' => 'link',
      '#text' => $current_level['ord'],
      '#path' => 'search/' . $path . '/' . $current_level['cql'],
      '#options' => [
        'attributes' => [],
        'html' => TRUE,
      ],
    ];
  }
  else {
    $heading = [
      '#markup' => $current_level['ord'],
    ];
  }
  return $heading;
}

/**
 * Parse hierarchy xml into an array
 *
 * @return bool|array
 */
function _bibdk_subject_hierarchy_read_data() {
  $filename = drupal_realpath(BIBDK_XML_PATH) . '/emnehierarki_full.xml';
  $data = _bibdk_subject_hierarchy_parse_xml($filename);

  if (!empty($data)) {
    return _bibdk_subject_hierarchy_parse($data);
  }
  else {
    watchdog('subject_hierarchy', 'No XML file found.', [], WATCHDOG_ERROR);
  }

  return FALSE;
}

/**
 * Parse hierarchy xml into an array.
 */
function _bibdk_subject_hierarchy_parse_xml($filename) {
  $xml = @simplexml_load_file($filename);
  // Simple trick to convert xml to php array
  $data = drupal_json_decode(drupal_json_encode($xml));
  return (isset($data['term'])) ? $data['term'] : [];
}

/**
 * Parse hierarchy xml into an array.
 */
function _bibdk_subject_hierarchy_parse($terms) {
  $record = [];
  // if the key 'ord' exists there is only one term, and we need to wrap it in
  // an array for the foreach loop to work correctly
  if (isset($terms['ord'])) {
    $terms = [$terms];
  }

  foreach ($terms as $n => $term) {
    $record[$n] = _bibdk_subject_hierarchy_parse_term($term);
  }

  return $record;
}

/**
 * Parse hierarchy term.
 */
function _bibdk_subject_hierarchy_parse_term($term) {
  $record = [];
  foreach ($term as $key => $item) {
    if ((string) $key != (string) (int) $key) {
      if ($key == 'term') {
        $record['term'] = _bibdk_subject_hierarchy_parse($item);
      }
      elseif ($key == 'cql' && !empty($item)) {
        $record['cql'] = $item;
      }
      elseif ($key == 'ord' && !empty($item)) {
        $record['note'] = 'LABEL_' . normalize_string($item);
        $record[$key] = $item;
      }
      else {
        $record[$key] = !empty($item) ? $item : '';
      }
    }
  }
  return $record;
}

/**
 * Normalize a string so that it can be compared with others without being too fussy.
 *   e.g. "?dr???l?n?" would return "adrenaline"
 *   Note: Some letters are converted into more than one letter,
 *   e.g. "?" becomes "sz", or "?" becomes "ae"
 */
function normalize_string($string) {
  // remove whitespace, leaving only a single underscore between words.
  $string = preg_replace('/\s+/', '_', $string);
  // flick diacritics off of their letters
  $string = preg_replace('~&([a-z]{1,2})(?:acute|cedil|circ|grave|lig|orn|ring|slash|th|tilde|uml|caron);~i', '$1', htmlentities($string, ENT_COMPAT, 'UTF-8'));
  $string = strtoupper($string);
  // replace all non-latin1 characters with NULL
  $string = preg_replace('/[^0-9A-Z_]/', NULL, $string);
  $string = str_replace('__', '_', $string);
  $string = str_replace('_AMP_', '_', $string); // ditch "&"
  return $string;
}
